<?php

namespace Proxies\__CG__\EventBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class event extends \EventBundle\Entity\event implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'idevent', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'titre', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'image', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'dateDebutEvent', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'dateFEvent', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'NbP', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'adresseEvent', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'typeEvent', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'description'];
        }

        return ['__isInitialized__', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'idevent', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'titre', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'image', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'dateDebutEvent', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'dateFEvent', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'NbP', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'adresseEvent', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'typeEvent', '' . "\0" . 'EventBundle\\Entity\\event' . "\0" . 'description'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (event $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getNbP()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNbP', []);

        return parent::getNbP();
    }

    /**
     * {@inheritDoc}
     */
    public function setNbP($NbP)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNbP', [$NbP]);

        return parent::setNbP($NbP);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateDebutEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateDebutEvent', []);

        return parent::getDateDebutEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateDebutEvent($dateDebutEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateDebutEvent', [$dateDebutEvent]);

        return parent::setDateDebutEvent($dateDebutEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateFEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateFEvent', []);

        return parent::getDateFEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateFEvent($dateFEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateFEvent', [$dateFEvent]);

        return parent::setDateFEvent($dateFEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdresseEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdresseEvent', []);

        return parent::getAdresseEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setAdresseEvent($adresseEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAdresseEvent', [$adresseEvent]);

        return parent::setAdresseEvent($adresseEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeEvent', []);

        return parent::getTypeEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeEvent($typeEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeEvent', [$typeEvent]);

        return parent::setTypeEvent($typeEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdevent()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdevent();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdevent', []);

        return parent::getIdevent();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdevent($idevent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdevent', [$idevent]);

        return parent::setIdevent($idevent);
    }

    /**
     * {@inheritDoc}
     */
    public function setTitre($titre)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitre', [$titre]);

        return parent::setTitre($titre);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitre()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitre', []);

        return parent::getTitre();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage($image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', [$image]);

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', []);

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateD($dateDebut)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateD', [$dateDebut]);

        return parent::setDateD($dateDebut);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateDebut()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateDebut', []);

        return parent::getDateDebut();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateFin($dateFin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateFin', [$dateFin]);

        return parent::setDateFin($dateFin);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateFin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateFin', []);

        return parent::getDateFin();
    }

}
